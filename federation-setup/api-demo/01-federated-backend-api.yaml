---
apiVersion: v1
kind: Namespace
metadata:
  name: federation-demo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: federated-backend
  namespace: federation-demo
---
apiVersion: spire.spiffe.io/v1alpha1
kind: ClusterSPIFFEID
metadata:
  name: federated-backend
spec:
  spiffeIDTemplate: "spiffe://apps.cluster-2.devcluster.openshift.com/ns/{{ .PodMeta.Namespace }}/sa/{{ .PodSpec.ServiceAccountName }}"
  podSelector:
    matchLabels:
      app: federated-backend
  namespaceSelector:
    matchLabels:
      kubernetes.io/metadata.name: federation-demo
  federatesWith:
  - "apps.cluster-1.devcluster.openshift.com"
  className: zero-trust-workload-identity-manager-spire
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: federated-backend-api
  namespace: federation-demo
data:
  app.py: |
    from flask import Flask, jsonify, request
    import subprocess
    import json
    from datetime import datetime

    app = Flask(__name__)

    def get_spiffe_info():
        try:
            result = subprocess.run(
                ['/spire-agent', 'api', 'fetch', 'x509', 
                 '-socketPath', '/spiffe-workload-api/spire-agent.sock',
                 '-write', '/tmp/'],
                capture_output=True, text=True, timeout=10
            )
            
            # Get SPIFFE ID
            svid_result = subprocess.run(
                ['openssl', 'x509', '-in', '/tmp/svid.0.pem', '-noout', '-text'],
                capture_output=True, text=True
            )
            
            spiffe_id = "unknown"
            for line in svid_result.stdout.split('\n'):
                if 'URI:spiffe://' in line:
                    spiffe_id = line.strip().split('URI:')[1]
                    break
            
            # Count bundles
            bundle_count = subprocess.run(
                ['grep', '-c', 'BEGIN CERTIFICATE', '/tmp/bundle.0.pem'],
                capture_output=True, text=True
            )
            
            return {
                'spiffe_id': spiffe_id,
                'bundle_count': int(bundle_count.stdout.strip()) if bundle_count.returncode == 0 else 0
            }
        except Exception as e:
            return {'error': str(e)}

    @app.route('/api/data', methods=['GET'])
    def get_data():
        print(f"[{datetime.now().strftime('%H:%M:%S')}] üì• API REQUEST received from {request.remote_addr}")
        
        # Get client cert info if available
        client_info = "No client cert"
        if request.environ.get('HTTP_X_FORWARDED_CLIENT_CERT'):
            client_info = "Client cert present"
        
        spiffe_info = get_spiffe_info()
        
        response_data = {
            'status': 'success',
            'message': 'FEDERATED Backend API Response',
            'backend_spiffe_id': spiffe_info.get('spiffe_id', 'unknown'),
            'backend_cluster': 'cluster-2 (apps.cluster-2.devcluster.openshift.com)',
            'trust_bundles': spiffe_info.get('bundle_count', 0),
            'federation_enabled': True,
            'federates_with': ['apps.cluster-1.devcluster.openshift.com'],
            'timestamp': datetime.now().isoformat(),
            'data': {
                'stocks': [
                    {'symbol': 'AAPL', 'price': 150.25},
                    {'symbol': 'GOOGL', 'price': 2800.50},
                    {'symbol': 'MSFT', 'price': 380.75}
                ],
                'message': 'This data came from federated backend in Cluster 2!'
            }
        }
        
        print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ Sending response: {json.dumps(response_data, indent=2)}")
        return jsonify(response_data), 200

    @app.route('/health', methods=['GET'])
    def health():
        return jsonify({'status': 'healthy', 'service': 'federated-backend'}), 200

    if __name__ == '__main__':
        print("=" * 60)
        print("üöÄ FEDERATED BACKEND API SERVER (Cluster 2)")
        print("=" * 60)
        print("")
        
        spiffe_info = get_spiffe_info()
        print(f"‚úÖ My SPIFFE ID: {spiffe_info.get('spiffe_id', 'unknown')}")
        print(f"‚úÖ Trust bundles loaded: {spiffe_info.get('bundle_count', 0)} certificates")
        print(f"‚úÖ Federation enabled with: apps.cluster-1.devcluster.openshift.com")
        print("")
        print("üì° API Endpoints:")
        print("   GET /api/data  - Returns stock data")
        print("   GET /health    - Health check")
        print("")
        print("üîê Security: Accepts requests from ANY SPIFFE ID")
        print("   (In production, you'd add authorization)")
        print("")
        print("üåê Starting server on 0.0.0.0:8080...")
        print("   Waiting for requests...")
        print("")
        
        app.run(host='0.0.0.0', port=8080, debug=False)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: federated-backend
  namespace: federation-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: federated-backend
  template:
    metadata:
      labels:
        app: federated-backend
    spec:
      serviceAccountName: federated-backend
      containers:
      - name: api
        image: python:3.11-slim
        command: ["/bin/bash", "-c"]
        args:
        - |
          # Install dependencies
          pip install flask requests --quiet
          
          # Install OpenSSL and download spire-agent
          apt-get update -qq && apt-get install -y openssl curl wget -qq
          wget -q https://github.com/spiffe/spire/releases/download/v1.10.0/spire-1.10.0-linux-amd64-musl.tar.gz
          tar xzf spire-1.10.0-linux-amd64-musl.tar.gz
          cp spire-1.10.0/bin/spire-agent /spire-agent
          chmod +x /spire-agent
          
          # Wait for SPIFFE socket
          while [ ! -S /spiffe-workload-api/spire-agent.sock ]; do
            echo "Waiting for SPIFFE socket..."
            sleep 2
          done
          
          # Run the API
          python /app/app.py
        ports:
        - containerPort: 8080
          name: http
        volumeMounts:
        - name: spiffe-workload-api
          mountPath: /spiffe-workload-api
          readOnly: true
        - name: app
          mountPath: /app
      volumes:
      - name: spiffe-workload-api
        csi:
          driver: csi.spiffe.io
          readOnly: true
      - name: app
        configMap:
          name: federated-backend-api
---
apiVersion: v1
kind: Service
metadata:
  name: federated-backend
  namespace: federation-demo
spec:
  selector:
    app: federated-backend
  ports:
  - port: 8080
    targetPort: 8080
    name: http
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: federated-backend
  namespace: federation-demo
spec:
  to:
    kind: Service
    name: federated-backend
  port:
    targetPort: http
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect


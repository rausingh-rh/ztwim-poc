---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: non-federated-backend
  namespace: federation-demo
---
apiVersion: spire.spiffe.io/v1alpha1
kind: ClusterSPIFFEID
metadata:
  name: non-federated-backend
spec:
  spiffeIDTemplate: "spiffe://apps.cluster-2.devcluster.openshift.com/ns/{{ .PodMeta.Namespace }}/sa/{{ .PodSpec.ServiceAccountName }}"
  podSelector:
    matchLabels:
      app: non-federated-backend
  namespaceSelector:
    matchLabels:
      kubernetes.io/metadata.name: federation-demo
  # NO federatesWith field - this workload does NOT have federated bundles
  className: zero-trust-workload-identity-manager-spire
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: non-federated-backend-app
  namespace: federation-demo
data:
  main.go: |
    package main

    import (
        "context"
        "fmt"
        "log"
        "net/http"
        "time"

        "github.com/spiffe/go-spiffe/v2/spiffeid"
        "github.com/spiffe/go-spiffe/v2/spiffetls/tlsconfig"
        "github.com/spiffe/go-spiffe/v2/workloadapi"
    )

    func main() {
        ctx, cancel := context.WithCancel(context.Background())
        defer cancel()

        socketPath := "unix:///spiffe-workload-api/spire-agent.sock"
        log.Printf("üöÄ Starting NON-FEDERATED Backend Server (Cluster 2)")
        log.Printf("‚ö†Ô∏è  WARNING: This backend does NOT have federation enabled!")
        log.Printf("üì° Connecting to SPIFFE Workload API at: %s", socketPath)

        // Create X.509 source
        source, err := workloadapi.NewX509Source(ctx, workloadapi.WithClientOptions(workloadapi.WithAddr(socketPath)))
        if err != nil {
            log.Fatalf("‚ùå Unable to create X509Source: %v", err)
        }
        defer source.Close()

        // Get SVID to display identity
        svid, err := source.GetX509SVID()
        if err != nil {
            log.Fatalf("‚ùå Unable to get X509 SVID: %v", err)
        }
        log.Printf("‚úÖ My SPIFFE ID: %s", svid.ID)

        // Get bundle to see trust domains
        bundle, err := source.GetX509BundleForTrustDomain(spiffeid.RequireTrustDomainFromString("apps.cluster-2.devcluster.openshift.com"))
        if err != nil {
            log.Printf("‚ö†Ô∏è  Could not get own bundle: %v", err)
        } else {
            log.Printf("‚úÖ Own trust bundle loaded: %d certificates", len(bundle.X509Authorities()))
        }

        // Check for federated bundle (should NOT exist)
        federatedBundle, err := source.GetX509BundleForTrustDomain(spiffeid.RequireTrustDomainFromString("apps.cluster-1.devcluster.openshift.com"))
        if err != nil {
            log.Printf("‚ùå No federated bundle for cluster-1 (EXPECTED - federation not configured)")
        } else {
            log.Printf("‚ö†Ô∏è  UNEXPECTED: Has federated bundle with %d certificates", len(federatedBundle.X509Authorities()))
        }

        // Create HTTP handler
        http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
            log.Printf("üì• Received request from: %s", r.RemoteAddr)
            
            if r.TLS != nil && len(r.TLS.PeerCertificates) > 0 {
                clientID, err := spiffeid.FromURI(r.TLS.PeerCertificates[0].URIs[0])
                if err == nil {
                    log.Printf("‚ö†Ô∏è  Client SPIFFE ID: %s", clientID)
                    log.Printf("‚ùå Should have REJECTED this connection!")
                    log.Printf("   Client is from cluster-1, but we don't trust cluster-1")
                }
            }

            response := fmt.Sprintf(`
‚ùå ERROR: This connection should have been rejected!

Backend SPIFFE ID: %s  
Backend Configuration: NON-FEDERATED

This backend does NOT trust cluster-1 certificates.
If you're seeing this, something is wrong!

Time: %s
`, svid.ID, time.Now().Format(time.RFC3339))

            http.Error(w, response, http.StatusForbidden)
        })

        // Create TLS config with SPIFFE authentication (only own trust domain)
        tlsConfig := tlsconfig.MTLSServerConfig(source, source, tlsconfig.AuthorizeAny())
        server := &http.Server{
            Addr:      ":8444",
            TLSConfig: tlsConfig,
        }

        log.Printf("üåê Starting HTTPS server on :8444 with mTLS (NO federation)")
        log.Printf("üîê Accepting connections ONLY from:")
        log.Printf("   ‚Ä¢ apps.cluster-2.devcluster.openshift.com (own domain)")
        log.Printf("‚ùå Rejecting connections from:")
        log.Printf("   ‚Ä¢ apps.cluster-1.devcluster.openshift.com (not trusted)")
        log.Printf("")
        log.Printf("Waiting for connections...")

        if err := server.ListenAndServeTLS("", ""); err != nil {
            log.Fatalf("‚ùå Server failed: %v", err)
        }
    }
  go.mod: |
    module backend

    go 1.21

    require github.com/spiffe/go-spiffe/v2 v2.1.7

    require (
        github.com/Microsoft/go-winio v0.6.1 // indirect
        github.com/go-jose/go-jose/v3 v3.0.1 // indirect
        github.com/zeebo/errs v1.3.0 // indirect
        golang.org/x/crypto v0.17.0 // indirect
        golang.org/x/mod v0.8.0 // indirect
        golang.org/x/sys v0.15.0 // indirect
        golang.org/x/tools v0.6.0 // indirect
        google.golang.org/genproto/googleapis/rpc v0.0.0-20230822172742-b8732ec3820d // indirect
        google.golang.org/grpc v1.59.0 // indirect
        google.golang.org/protobuf v1.31.0 // indirect
    )
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: non-federated-backend
  namespace: federation-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: non-federated-backend
  template:
    metadata:
      labels:
        app: non-federated-backend
    spec:
      serviceAccountName: non-federated-backend
      containers:
      - name: backend
        image: golang:1.21
        workingDir: /app
        command: ["/bin/bash", "-c"]
        args:
        - |
          cp /config/* /app/
          go mod download
          go run main.go
        ports:
        - containerPort: 8444
          name: https
        volumeMounts:
        - name: spiffe-workload-api
          mountPath: /spiffe-workload-api
          readOnly: true
        - name: config
          mountPath: /config
      volumes:
      - name: spiffe-workload-api
        csi:
          driver: csi.spiffe.io
          readOnly: true
      - name: config
        configMap:
          name: non-federated-backend-app
---
apiVersion: v1
kind: Service
metadata:
  name: non-federated-backend
  namespace: federation-demo
spec:
  selector:
    app: non-federated-backend
  ports:
  - port: 8444
    targetPort: 8444
    name: https
  type: ClusterIP

